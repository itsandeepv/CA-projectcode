const initialData = [{ id: 1, date: '2022-05-09', refNo: '001', partyName: 'ABC Corporation', categoryName: 'Electronics', type: 'Sales', total: 5000, received: 3000, balance: 2000 }, { id: 2, date: '2022-05-10', refNo: '002', partyName: 'XYZ Corporation', categoryName: 'Clothing', type: 'Purchase', total: 4000, received: 0, balance: 4000 }];

const columns = [{ field: 'date', headerName: 'Date', width: 150 }, { field: 'refNo', headerName: 'Ref No', width: 150 }, { field: 'partyName', headerName: 'Party Name', width: 200 }, { field: 'categoryName', headerName: 'Category Name', width: 200 }, { field: 'type', headerName: 'Type', width: 150 }, { field: 'total', headerName: 'Total', width: 150 }, { field: 'received', headerName: 'Received', width: 150 }, { field: 'balance', headerName: 'Balance', width: 150 }, { field: 'print', headerName: 'Print', width: 100, sortable: false, renderCell: () => <button>Print</button> }];

const Table = ({ data }) => {
    const [tableData, setTableData] = useState(initialData);

    const handleAddRow = () => {
        const id = tableData[tableData.length - 1].id + 1;
        const newRow = { id, date: '', refNo: '', partyName: '', categoryName: '', type: '', total: 0, received: 0, balance: 0 };
        setTableData([...tableData, newRow]);
    };

    const handleCellChange = (e, id, field) => {
        const updatedData = tableData.map(row => {
            if (row.id === id) {
                return { ...row, [field]: e.target.value };
            }
            return row;
        });
        setTableData(updatedData);
    };

    const getTotal = (field) => {
        const total = tableData.reduce((acc, curr) => acc + curr[field], 0);
        return isNaN(total) ? 0 : total.toFixed(2);
    };

    return (
    <>
            <button onClick={handleAddRow}>Add Row</button>
            <table>
                <thead>
                    <tr>
                        {columns.map(col => (
                            <th key={col.field} style={{ width: col.width }}>
                                {col.headerName}
                            </th>
                        ))}
                    </tr>
                </thead>
                <tbody>
                    {tableData.map(row => (
                        <tr key={row.id}>
                            {columns.map(col => (
                                <td key={col.field}>
                                    {col.renderCell
                                        ? col.renderCell(row)
                                        : <input type="text" value={row[col.field]} onChange={e => handleCellChange(e, row.id, col.field)} />}
                                </td>
                            ))}
                        </tr>
                    ))}
                </tbody>
                <tfoot>
                    <tr>
                        <td colSpan={5} />
                        <td>Total: {getTotal('total')}</td>
</tr>
                </tfoot>
            </table>
            

            </>
                    )}

export default Table 



///efddf

<Box>
                        <div>
                            <label htmlFor="search-input">Search:</label>
                            <input
                                type="text"
                                id="search-input"
                                value={searchText}
                                onChange={handleSearchInputChange}
                            />
                        </div>
                        <table>
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Ref No</th>
                                    <th>Party Name</th>
                                    <th>Category Name</th>
                                    <th>Type</th>
                                    <th>Total</th>
                                    <th>Received</th>
                                    <th>Balance</th>
                                    <th>Print</th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredData.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.date}</td>
                                        <td>{item.refNo}</td>
                                        <td>{item.partyName}</td>
                                        <td>{item.categoryName}</td>
                                        <td>{item.type}</td>
                                        <td>{item.total}</td>
                                        <td>{item.received}</td>
                                        <td>{item.total - item.received}</td>
                                        <td>
                                            <button>
                                                <i className="fa fa-print" aria-hidden="true" /> Print
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colSpan="5">Total:</td>
                                    <td>{totalAmount}</td>
                                    <td colSpan="2"></td>
                                </tr>
                            </tfoot>
                        </table>
                    </Box>




